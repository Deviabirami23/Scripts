from datetime import time

from pip._internal.utils import logging

from pr_automation.base import BasePage
from pr_automation.locators import Locators


class Negative_cases(BasePage):
    def __init__(self, driver):
        super().__init__(driver)

    def neg_check(self):
        self.click(Locators.configuration)
        time.sleep(2)
        self.click(Locators.earning)
        time.sleep(2)
        self.check_popup()
        self.neg_earnings()
        self.click(Locators.configuration)
        self.click(Locators.deduction)
        self.check_popup()
        self.neg_deductions()
        self.click(Locators.configuration)
        self.click(Locators.other_deduction)
        self.check_popup()
        self.neg_other_deductions()
        self.click(Locators.configuration)
        self.click(Locators.earned_leave)
        self.check_popup()

    def check_popup(self):

        # By selecting a checkbox and click add icon
        checkboxes = self.click(Locators.checkbox)
        if checkboxes is not None:
            print(len(checkboxes))
            for checkbox in checkboxes:
                checkbox.click()
        time.sleep(2)
        self.click(Locators.add_icon)
        time.sleep(2)
        alert = self.driver.switch_to.alert.accept()
        time.sleep(2)
        self.click(Locators.checkbox)
        time.sleep(3)

        # By clicking edit icon without selecting any checkbox
        self.click(Locators.edit_icon)
        time.sleep(2)
        self.driver.switch_to.alert.accept()
        time.sleep(2)

        # By clicking delete icon without selecting any checkbox
        self.click(Locators.delete_icon)
        time.sleep(2)
        self.driver.switch_to.alert.accept()
        time.sleep(2)

    def neg_earnings(self):
        try:

            for i in range(11):
                self.click(Locators.add_icon)
                time.sleep(2)

                if i == 0:  # not adding any data just clicking submit button
                    self.click(Locators.submit)
                    time.sleep(2)
                    self.assertEqual(self.get_text(Locators.neg_name), "Field is required")
                    # logging.info("The required input field for Name is working!")
                    time.sleep(2)
                    self.assertEqual(self.get_text(Locators.neg_payslip), "Field is required")
                    # logging.info("The required input field for Name in Payslip is working!")
                    time.sleep(2)
                    self.assertEqual(self.get_text(Locators.neg_calc), "Field is required")
                    # logging.info("The required input field for Calculation Type is working!")
                    time.sleep(2)
                    self.assertEqual(self.get_text(Locators.neg_pf), "Field is required")
                    # logging.info("The required input field for PF Applicable is working!")
                    time.sleep(2)
                    self.assertEqual(self.get_text(Locators.neg_tax), "Field is required")
                    # logging.info("The required input field for Taxable is working!")
                    time.sleep(2)
                    self.assertEqual(self.get_text(Locators.neg_pay), "Field is required")
                    # logging.info("The required input field for Pay Type is working!")
                    time.sleep(2)
                    self.assertEqual(self.get_text(Locators.neg_active), "Field is required")
                    # logging.info("The required input field for Active is working!")
                    time.sleep(2)
                    self.assertEqual(self.get_text(Locators.neg_esi), "Field is required")
                    # logging.info("The required input field for ESI Applicable is working!")
                    time.sleep(2)
                    self.assertEqual(self.get_text(Locators.neg_flexible), "Field is required")
                    # logging.info("The required input field for Flexible Benefit is working!")
                    time.sleep(2)
                    # self.is_clickable(Locators.cancel)
                    time.sleep(2)
                    self.click(Locators.cancel)
                    time.sleep(2)

                elif i == 1:  # add all date except the Name field
                    self.enter_text(Locators.payslip, 'Basic pay')
                    time.sleep(2)
                    self.dropdown_click(Locators.calc, 2)
                    time.sleep(2)
                    self.dropdown_click(Locators.pf, 1)
                    self.dropdown_click(Locators.tax_type, 1)
                    self.enter_text(Locators.description, 'Earning 1')
                    self.dropdown_click(Locators.tax_type, 1)
                    self.dropdown_click(Locators.active, 1)
                    self.dropdown_click(Locators.esi, 1)
                    self.dropdown_click(Locators.flexible, 1)
                    time.sleep(2)
                    self.click(Locators.submit)
                    self.assertEqual(self.get_text(Locators.neg_name), "Field is required")
                    # logging.info("The required input field for Name is working!")
                    time.sleep(2)
                    self.click(Locators.cancel)
                    time.sleep(2)

                elif i == 2:  # add all the data except the Name in payslip field
                    self.enter_text(Locators.name, 'test deduct')
                    time.sleep(2)
                    self.dropdown_click(Locators.tax_type, 1)
                    self.enter_text(Locators.description, 'Earning 1')
                    self.dropdown_click(Locators.tax_type, 1)
                    self.dropdown_click(Locators.active, 1)
                    self.dropdown_click(Locators.pay_type, 1)
                    self.dropdown_click(Locators.calc, 2)
                    time.sleep(2)
                    self.click(Locators.submit)
                    self.assertEqual(self.get_text(Locators.neg_payslip), "Field is required")
                    # logging.info("The required input field for Name in Payslip is working!")
                    self.click(Locators.cancel)
                    time.sleep(2)



                elif i == 3:  # add all the data except Calculation Type field
                    self.enter_text(Locators.name, 'Basic amount test')
                    self.enter_text(Locators.payslip, 'Basic pay')
                    self.dropdown_click(Locators.pf, 1)
                    self.dropdown_click(Locators.tax_type, 1)
                    self.enter_text(Locators.description, 'Earning 1')
                    self.dropdown_click(Locators.pay_type, 1)
                    self.dropdown_click(Locators.active, 1)
                    self.dropdown_click(Locators.esi, 1)
                    self.dropdown_click(Locators.flexible, 1)
                    time.sleep(2)
                    self.click(Locators.submit)
                    self.assertEqual(self.get_text(Locators.neg_calc), "Field is required")
                    # logging.info("The required input field for Calculation Type is working!")
                    time.sleep(2)
                    self.click(Locators.cancel)
                    time.sleep(2)

                elif i == 4:  # add all the data except PF Applicable field
                    self.enter_text(Locators.name, 'Basic amount test')
                    self.enter_text(Locators.payslip, 'Basic pay')
                    self.dropdown_click(Locators.calc, 2)
                    time.sleep(2)
                    self.dropdown_click(Locators.tax_type, 1)
                    self.enter_text(Locators.description, 'Earning 1')
                    self.dropdown_click(Locators.pay_type, 1)
                    self.dropdown_click(Locators.active, 1)
                    self.dropdown_click(Locators.esi, 1)
                    self.dropdown_click(Locators.flexible, 1)
                    time.sleep(2)
                    self.click(Locators.submit)
                    self.assertEqual(self.get_text(Locators.neg_pf), "Field is required")
                    # logging.info("The required input field for PF Applicable is working!")
                    time.sleep(2)
                    self.click(Locators.cancel)
                    time.sleep(2)

                elif i == 5:  # add all the data except Taxable field
                    self.enter_text(Locators.name, 'Basic amount test')
                    self.enter_text(Locators.payslip, 'Basic pay')
                    self.dropdown_click(Locators.calc, 2)
                    time.sleep(2)
                    self.dropdown_click(Locators.pf, 1)
                    self.enter_text(Locators.description, 'Earning 1')
                    self.dropdown_click(Locators.pay_type, 1)
                    self.dropdown_click(Locators.active, 1)
                    self.dropdown_click(Locators.esi, 1)
                    self.dropdown_click(Locators.flexible, 1)
                    time.sleep(2)
                    self.click(Locators.submit)
                    self.assertEqual(self.get_text(Locators.neg_tax), "Field is required")
                    # logging.info("The required input field for Taxable is working!")
                    time.sleep(2)
                    self.click(Locators.cancel)
                    time.sleep(2)

                elif i == 6:  # add all the data except Pay Type field
                    self.enter_text(Locators.name, 'Basic amount test')
                    self.enter_text(Locators.payslip, 'Basic pay')
                    self.dropdown_click(Locators.calc, 2)
                    time.sleep(2)
                    self.dropdown_click(Locators.pf, 1)
                    self.dropdown_click(Locators.tax_type, 1)
                    self.enter_text(Locators.description, 'Earning 1')
                    self.dropdown_click(Locators.active, 1)
                    self.dropdown_click(Locators.esi, 1)
                    self.dropdown_click(Locators.flexible, 1)
                    time.sleep(2)
                    self.click(Locators.submit)
                    self.assertEqual(self.get_text(Locators.neg_pay), "Field is required")
                    # logging.info("The required input field for Pay Type is working!")
                    time.sleep(2)
                    self.click(Locators.cancel)
                    time.sleep(2)

                elif i == 7:  # add all the data except Active field
                    self.enter_text(Locators.name, 'Basic amount test')
                    self.enter_text(Locators.payslip, 'Basic pay')
                    self.dropdown_click(Locators.calc, 2)
                    time.sleep(2)
                    self.dropdown_click(Locators.pf, 1)
                    self.dropdown_click(Locators.tax_type, 1)
                    self.enter_text(Locators.description, 'Earning 1')
                    self.dropdown_click(Locators.pay_type, 1)
                    self.dropdown_click(Locators.esi, 1)
                    self.dropdown_click(Locators.flexible, 1)
                    time.sleep(2)
                    self.click(Locators.submit)
                    self.assertEqual(self.get_text(Locators.neg_active), "Field is required")
                    # logging.info("The required input field for Active is working!")
                    time.sleep(2)
                    self.click(Locators.cancel)
                    time.sleep(2)

                elif i == 8:  # add all the data except ESI Applicable field
                    self.enter_text(Locators.name, 'Basic amount test')
                    self.enter_text(Locators.payslip, 'Basic pay')
                    self.dropdown_click(Locators.calc, 2)
                    time.sleep(2)
                    self.dropdown_click(Locators.pf, 1)
                    self.dropdown_click(Locators.tax_type, 1)
                    self.enter_text(Locators.description, 'Earning 1')
                    self.dropdown_click(Locators.pay_type, 1)
                    self.dropdown_click(Locators.active, 1)
                    self.dropdown_click(Locators.flexible, 1)
                    time.sleep(2)
                    self.click(Locators.submit)
                    self.assertEqual(self.get_text(Locators.neg_esi), "Field is required")
                    # logging.info("The required input field for ESI Applicable is working!")
                    time.sleep(2)
                    self.click(Locators.cancel)
                    time.sleep(2)

                elif i == 9:  # add all the data except Flexible Benefit field
                    self.enter_text(Locators.name, 'Basic amount test')
                    self.enter_text(Locators.payslip, 'Basic pay')
                    self.dropdown_click(Locators.calc, 2)
                    time.sleep(2)
                    self.dropdown_click(Locators.pf, 1)
                    self.dropdown_click(Locators.tax_type, 1)
                    self.enter_text(Locators.description, 'Earning 1')
                    self.dropdown_click(Locators.pay_type, 1)
                    self.dropdown_click(Locators.active, 1)
                    self.dropdown_click(Locators.esi, 1)
                    time.sleep(2)
                    self.click(Locators.submit)
                    self.assertEqual(self.get_text(Locators.neg_flexible), "Field is required")
                    # logging.info("The required input field for Flexible Benefit is working!")
                    time.sleep(2)
                    self.click(Locators.cancel)
                    time.sleep(2)

                elif i == 10:  # add all the data with numeric value in name field
                    self.enter_text(Locators.name, '12345')
                    self.enter_text(Locators.payslip, 'Basic pay')
                    self.dropdown_click(Locators.calc, 2)
                    time.sleep(2)
                    self.dropdown_click(Locators.pf, 1)
                    self.dropdown_click(Locators.tax_type, 1)
                    self.enter_text(Locators.description, 'Earning 1')
                    self.dropdown_click(Locators.pay_type, 1)
                    self.dropdown_click(Locators.active, 1)
                    self.dropdown_click(Locators.esi, 1)
                    self.dropdown_click(Locators.flexible, 1)
                    time.sleep(2)
                    self.click(Locators.submit)
                    self.assertEqual(self.get_text(Locators.neg_name), "Only text is allowed")
                    # logging.info("The alert for Name is working!")
                    time.sleep(2)
                    self.click(Locators.cancel)
                    time.sleep(2)

                elif i == 11:  # add all the data with numeric value in name field
                    self.enter_text(Locators.name, 'Basic amount test')
                    self.enter_text(Locators.payslip, '98765')
                    self.dropdown_click(Locators.calc, 2)
                    time.sleep(2)
                    self.dropdown_click(Locators.pf, 1)
                    self.dropdown_click(Locators.tax_type, 1)
                    self.enter_text(Locators.description, 'Earning 1')
                    self.dropdown_click(Locators.pay_type, 1)
                    self.dropdown_click(Locators.active, 1)
                    self.dropdown_click(Locators.esi, 1)
                    self.dropdown_click(Locators.flexible, 1)
                    time.sleep(2)
                    self.click(Locators.submit)
                    self.assertEqual(self.get_text(Locators.neg_payslip), "Only text is allowed")
                    # logging.info("The alert for Name in Payslip is working!")
                    time.sleep(2)
                    self.click(Locators.cancel)
                    time.sleep(2)

        except AssertionError:
            print("the submit button is not working")
        # finally:
        #     self.click(Locator.CANCEL)
        #     time.sleep(2)

    def neg_deductions(self):
        try:
            for i in range(8):
                self.click(Locators.add_icon)
                time.sleep(2)

                if i == 0:  # not adding any data just clicking submit button
                    self.click(Locators.submit)
                    time.sleep(2)
                    self.assertEqual(self.get_text(Locators.neg_name), "Field is required")
                    # logging.info("The required input field for Name is working!")
                    time.sleep(2)
                    self.assertEqual(self.get_text(Locators.neg_payslip), "Field is required")
                    # logging.info("The required input field for Name in Payslip is working!")
                    time.sleep(2)
                    self.assertEqual(self.get_text(Locators.neg_deduction_type), "Field is required")
                    # logging.info("The required input field for Deduction type is working!")
                    time.sleep(2)
                    self.assertEqual(self.get_text(Locators.neg_active), "Field is required")
                    # logging.info("The required input field for Active is working!")
                    time.sleep(2)
                    self.assertEqual(self.get_text(Locators.neg_pay), "Field is required")
                    # logging.info("The required input field for Pay Type is working!")
                    time.sleep(2)
                    self.assertEqual(self.get_text(Locators.neg_calc), "Field is required")
                    # logging.info("The required input field for Calculation Type is working!")
                    time.sleep(2)
                    # self.is_clickable(Locators.cancel)
                    time.sleep(2)
                    self.click(Locators.cancel)
                    time.sleep(2)


                elif i == 1:  # add all date except the Name field

                    self.enter_text(Locators.payslip, 'Test Deduct')
                    time.sleep(2)
                    self.dropdown_click(Locators.neg_deduction_type, 1)
                    self.dropdown_click(Locators.active, 1)
                    self.enter_text(Locators.description, 'Earning 1')
                    self.dropdown_click(Locators.pay_type, 1)
                    self.dropdown_click(Locators.calc, 2)
                    time.sleep(2)
                    self.click(Locators.submit)
                    self.assertEqual(self.get_text(Locators.name), "Field is required")
                    # logging.info("The required input field for Name is working!")
                    time.sleep(2)
                    self.click(Locators.cancel)
                    time.sleep(2)

                elif i == 2:  # add all the data except the Name in payslip field
                    self.enter_text(Locators.name, 'test deduct')
                    time.sleep(2)
                    self.dropdown_click(Locators.deduction_type, 1)
                    self.enter_text(Locators.description, 'Earning 1')
                    self.dropdown_click(Locators.neg_deduction_type, 1)
                    self.dropdown_click(Locators.active, 1)
                    self.dropdown_click(Locators.pay_type, 1)
                    self.dropdown_click(Locators.calc, 2)
                    time.sleep(2)
                    self.click(Locators.submit)
                    self.assertEqual(self.get_text(Locators.payslip), "Field is required")
                    # logging.info("The required input field for Name in Payslip is working!")
                    self.click(Locators.cancel)
                    time.sleep(2)

                elif i == 3:  # add all the data except Calculation Type field
                    self.enter_text(Locators.name, 'test')
                    self.enter_text(Locators.payslip, 'pay')
                    self.dropdown_click(Locators.deduction_type, 1)
                    self.enter_text(Locators.description, 'Earning 1')
                    self.dropdown_click(Locators.pay_type, 1)
                    self.dropdown_click(Locators.active, 1)
                    time.sleep(2)
                    self.click(Locators.submit)
                    self.assertEqual(self.get_text(Locators.neg_calc), "Field is required")
                    # logging.info("The required input field for Calculation Type is working!")
                    time.sleep(2)
                    self.click(Locators.cancel)
                    time.sleep(2)

                elif i == 4:  # add all the data except deduction type
                    self.enter_text(Locators.name, 'test')
                    self.enter_text(Locators.payslip, 'pay')
                    self.dropdown_click(Locators.calc, 2)
                    time.sleep(2)
                    self.enter_text(Locators.description, 'Earning 1')
                    self.dropdown_click(Locators.pay_type, 1)
                    self.dropdown_click(Locators.active, 1)
                    time.sleep(2)
                    self.click(Locators.submit)
                    self.assertEqual(self.get_text(Locators.neg_deduction_type), "Field is required")
                    # logging.info("The required input field for Tax type is working!")
                    time.sleep(2)
                    self.click(Locators.cancel)
                    time.sleep(2)

                elif i == 5:  # add all the data except Active field
                    self.enter_text(Locators.name, 'test')
                    self.enter_text(Locators.payslip, 'pay')
                    self.dropdown_click(Locators.calc, 2)
                    time.sleep(2)
                    self.dropdown_click(Locators.deduction_type, 1)
                    self.enter_text(Locators.description, 'Earning 1')
                    self.dropdown_click(Locators.pay_type, 1)
                    time.sleep(2)
                    self.click(Locators.submit)
                    self.assertEqual(self.get_text(Locators.active), "Field is required")
                    # logging.info("The required input field for Active is working!")
                    time.sleep(2)
                    self.click(Locators.cancel)
                    time.sleep(2)

                elif i == 6:  # add all the data except Pay Type field
                    self.enter_text(Locators.name, 'test')
                    self.enter_text(Locators.payslip, 'pay')
                    self.dropdown_click(Locators.calc, 2)
                    time.sleep(2)
                    self.dropdown_click(Locators.deduction_type, 1)
                    self.enter_text(Locators.description, 'Deduction 1')
                    self.dropdown_click(Locators.active, 1)
                    time.sleep(2)
                    self.click(Locators.submit)
                    self.assertEqual(self.get_text(Locators.pay_type), "Field is required")
                    # logging.info("The required input field for Pay Type is working!")
                    time.sleep(2)
                    self.click(Locators.cancel)
                    time.sleep(2)

                elif i == 7:  # add all the data with numeric value in name field
                    self.enter_text(Locators.name, '12345')
                    self.enter_text(Locators.payslip, 'Basic pay')
                    self.dropdown_click(Locators.calc, 2)
                    time.sleep(2)
                    self.dropdown_click(Locators.deduction_type, 1)
                    self.enter_text(Locators.description, 'Earning 1')
                    self.dropdown_click(Locators.pay_type, 1)
                    self.dropdown_click(Locators.active, 1)
                    time.sleep(2)
                    self.click(Locators.submit)
                    self.assertEqual(self.get_text(Locators.name), "Only text is allowed")
                    # logging.info("The alert for Name is working!")
                    time.sleep(2)
                    self.click(Locators.cancel)
                    time.sleep(2)

                elif i == 8:  # add all the data with numeric value in name field
                    self.enter_text(Locators.name, 'Basic amount test')
                    self.enter_text(Locators.payslip, '98765')
                    self.dropdown_click(Locators.calc, 2)
                    time.sleep(2)
                    self.dropdown_click(Locators.deduction_type, 1)
                    self.enter_text(Locators.description, 'Earning 1')
                    self.dropdown_click(Locators.pay_type, 1)
                    self.dropdown_click(Locators.active, 1)
                    time.sleep(2)
                    self.click(Locators.submit)
                    self.assertEqual(self.get_text(Locators.payslip), "Only text is allowed")
                    # logging.info("The alert for Name in Payslip is working!")
                    time.sleep(2)
                    self.click(Locators.cancel)
                    time.sleep(2)

        except AssertionError:
            print("the submit button is not working")
            # finally:
            #     self.click(Locator.CANCEL)
            #     time.sleep(2)

    def neg_other_deductions(self):
        try:
            for i in range(5):
                self.click(Locators.add_icon)
                time.sleep(2)

                if i == 0:  # not adding any data just clicking submit button
                    self.click(Locators.submit)
                    time.sleep(2)
                    self.assertEqual(self.get_text(Locators.neg_emp_id), "Field is required")
                    #logging.info("The required input field for Employee ID is working!")
                    time.sleep(2)
                    self.assertEqual(self.get_text(Locators.neg_deduction_name), "Field is required")
                    # logging.info("The required input field for Deduction Name is working!")
                    time.sleep(2)
                    self.assertEqual(self.get_text(Locators.neg_amount), "Field is required")
                    # logging.info("The required input field for Amount is working!")
                    time.sleep(2)
                    self.assertEqual(self.get_text(Locators.neg_date), "Field is required")
                    # logging.info("The required input field for Date field is working!")
                    time.sleep(2)
                    # self.is_clickable(Locators.cancel)
                    time.sleep(2)
                    self.click(Locators.cancel)
                    time.sleep(2)

                elif i == 1:
                    self.dropdown_click(Locators.deduction_name, 1)
                    self.send_keys(Locators.amount, "100")
                    self.enter_text(Locators.description, '1')
                    self.send_keys(Locators.date, "23-06-2023")
                    self.click(Locators.submit)
                    self.assertEqual(self.get_text(Locators.neg_emp_id), "Field is required")
                    # logging.info("The required input field for Employee id is working!")
                    time.sleep(2)
                    self.click(Locators.cancel)
                    time.sleep(2)

                elif i == 2:
                    self.dropdown_click(Locators.emp_id, 2)
                    time.sleep(2)
                    self.send_keys(Locators.amount, "100")
                    self.enter_text(Locators.description, '1')
                    self.send_keys(Locators.date, "23-06-2023")
                    self.click(Locators.submit)
                    self.assertEqual(self.get_text(Locators.neg_deduction_name), "Field is required")
                    # logging.info("The required input field for Deduction is working!")
                    time.sleep(2)
                    self.click(Locators.cancel)
                    time.sleep(2)

                elif i == 3:
                    self.dropdown_click(Locators.emp_id, 2)
                    time.sleep(2)
                    self.dropdown_click(Locators.deduction_name, 1)
                    self.enter_text(Locators.description, '1')
                    self.send_keys(Locators.date, "23-06-2023")
                    self.click(Locators.submit)
                    self.assertEqual(self.get_text(Locators.neg_amount), "Field is required")
                    # logging.info("The required input field for Amount field is working!")
                    time.sleep(2)
                    self.click(Locators.cancel)
                    time.sleep(2)

                elif i == 4:
                    self.dropdown_click(Locators.emp_id, 2)
                    time.sleep(2)
                    self.dropdown_click(Locators.deduction_name, 1)
                    self.send_keys(Locators.amount, "100")
                    self.enter_text(Locators.description, '1')
                    self.click(Locators.submit)
                    self.assertEqual(self.get_text(Locators.neg_date), "Field is required")
                    # logging.info("The required input field for Date field is working!")
                    time.sleep(2)
                    self.click(Locators.cancel)
                    time.sleep(2)
                elif i == 5:
                    self.dropdown_click(Locators.emp_id, 2)
                    time.sleep(2)
                    self.dropdown_click(Locators.deduction_name, 1)
                    self.send_keys(Locators.amount, "deduct")
                    self.enter_text(Locators.description, '1')
                    self.send_keys(Locators.date, "23-06-2023")
                    self.click(Locators.submit)
                    self.assertEqual(self.get_text(Locators.neg_amount), "Only numbers are allowed")
                    # logging.info("The alert for Date field is working!")
                    time.sleep(2)
                    self.click(Locators.cancel)
                    time.sleep(2)

        except AssertionError:
            print("the submit button is not working")
            # finally:
            #     self.click(Locator.CANCEL)
            #     time.sleep(2)

    def assertEqual(self, param, param1):
        pass
